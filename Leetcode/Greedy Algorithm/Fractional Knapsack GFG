// class Solution
// {
// public:
//     bool static comparision(Item a, Item b)
//     {
//         double r1 = (double)a.value / (double)a.weight;
//         double r2 = (double)b.value / (double)b.weight;
//         return r1 > r2;
//     }
//     // Function to get the maximum total value in the knapsack.
//     double fractionalKnapsack(int w, Item arr[], int n)
//     {
//         // Your code here
//         sort(arr, arr + n, comparision);

//         int currentweight = 0;
//         double finalvalue = 0.0;

//         for (int i = 0; i < n; i++)
//         {
//             if (currentweight + arr[i].weight <= w)
//             {
//                 currentweight += arr[i].weight;
//                 finalvalue += arr[i].value;
//             }
//             else
//             {
//                 int remain = w - currentweight;
//                 finalvalue += ((double)arr[i].value / (double)arr[i].weight) * (double)remain;
//                 break;
//             }
//         }
//         return finalvalue;
//     }
// };